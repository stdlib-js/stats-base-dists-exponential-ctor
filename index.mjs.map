{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-exponential-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-exponential-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-exponential-mean' );\nvar median = require( '@stdlib/stats-base-dists-exponential-median' );\nvar mode = require( '@stdlib/stats-base-dists-exponential-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-exponential-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-exponential-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-exponential-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-exponential-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-exponential-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-exponential-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-exponential-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-exponential-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-exponential-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction exponentialCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction exponentialLogCDF( x ) {\n\treturn logcdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction exponentialLogPDF( x ) {\n\treturn logpdf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction exponentialMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction exponentialPDF( x ) {\n\treturn pdf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction exponentialQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Exponential distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - rate parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Exponential} distribution instance\n*\n* @example\n* var exponential = new Exponential( 1.0 );\n*\n* var y = exponential.cdf( 0.8 );\n* // returns ~0.551\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nfunction Exponential() {\n\tvar lambda;\n\tif ( !(this instanceof Exponential) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Exponential();\n\t\t}\n\t\treturn new Exponential( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Exponential distribution differential entropy.\n*\n* @name entropy\n* @memberof Exponential.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.entropy;\n* // returns ~-0.386\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Exponential distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Exponential.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.kurtosis;\n* // returns 6.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Exponential distribution expected value.\n*\n* @name mean\n* @memberof Exponential.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Exponential distribution median.\n*\n* @name median\n* @memberof Exponential.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.median;\n* // returns ~0.173\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Exponential distribution mode.\n*\n* @name mode\n* @memberof Exponential.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Exponential distribution skewness.\n*\n* @name skewness\n* @memberof Exponential.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.skewness;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Exponential distribution standard deviation.\n*\n* @name stdev\n* @memberof Exponential.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.stdev;\n* // returns ~0.25\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Exponential distribution variance.\n*\n* @name variance\n* @memberof Exponential.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var exponential = new Exponential( 4.0 );\n*\n* var v = exponential.variance;\n* // returns ~0.063\n*/\nsetReadOnlyAccessor( Exponential.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.cdf( 0.5 );\n* // returns ~0.632\n*/\nsetReadOnly( Exponential.prototype, 'cdf', exponentialCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logcdf( 0.5 );\n* // returns ~-0.459\n*/\nsetReadOnly( Exponential.prototype, 'logcdf', exponentialLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.logpdf( 0.8 );\n* // returns ~-0.907\n*/\nsetReadOnly( Exponential.prototype, 'logpdf', exponentialLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.mgf( 0.5 );\n* // returns ~1.333\n*/\nsetReadOnly( Exponential.prototype, 'mgf', exponentialMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.pdf( 0.8 );\n* // returns ~0.404\n*/\nsetReadOnly( Exponential.prototype, 'pdf', exponentialPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Exponential.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var exponential = new Exponential( 2.0 );\n*\n* var v = exponential.quantile( 0.5 );\n* // returns ~0.347\n*/\nsetReadOnly( Exponential.prototype, 'quantile', exponentialQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Exponential;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution constructor.\n*\n* @module @stdlib/stats-base-dists-exponential-ctor\n*\n* @example\n* var Exponential = require( '@stdlib/stats-base-dists-exponential-ctor' );\n*\n* var exponential = new Exponential( 1.0 );\n*\n* var y = exponential.cdf( 0.8 );\n* // returns ~0.551\n*\n* var mode = exponential.mode;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isPositive","require$$3","isPrimitive","entropy","require$$4","kurtosis","require$$5","mean","require$$6","median","require$$7","mode","require$$8","skewness","require$$9","stdev","require$$10","variance","require$$11","cdf","require$$12","logcdf","require$$13","logpdf","require$$14","mgf","require$$15","pdf","require$$16","quantile","require$$17","format","require$$18","Exponential","lambda","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","t","p","lib"],"mappings":";;s4DAwBA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAA+CC,YAC5DC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EACXC,EAASC,EA2Fb,SAASC,IACR,IAAIC,EACJ,KAAOC,gBAAgBF,GACtB,OAA0B,IAArBG,UAAUC,OACP,IAAIJ,EAEL,IAAIA,EAAaG,UAAW,IAEpC,GAAKA,UAAUC,QAEd,IAAMrC,EADNkC,EAASE,UAAW,IAEnB,MAAM,IAAIE,UAAWP,EAAQ,oFAAqFG,SAGnHA,EAAS,EAeV,OAbAxC,EAAgByC,KAAM,SAAU,CAC/BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOP,GAERQ,IAAO,SAAcC,GACpB,IAAM3C,EAAY2C,GACjB,MAAM,IAAIL,UAAWP,EAAQ,yDAA0DY,IAExFT,EAASS,KAGJR,KAiBRrC,EAAqBmC,EAAYW,UAAW,WAAW,WACtD,OAAOzC,EAASgC,KAAKD,WAiBtBpC,EAAqBmC,EAAYW,UAAW,YAAY,WACvD,OAAOvC,EAAU8B,KAAKD,WAiBvBpC,EAAqBmC,EAAYW,UAAW,QAAQ,WACnD,OAAOrC,EAAM4B,KAAKD,WAiBnBpC,EAAqBmC,EAAYW,UAAW,UAAU,WACrD,OAAOnC,EAAQ0B,KAAKD,WAiBrBpC,EAAqBmC,EAAYW,UAAW,QAAQ,WACnD,OAAOjC,EAAMwB,KAAKD,WAiBnBpC,EAAqBmC,EAAYW,UAAW,YAAY,WACvD,OAAO/B,EAAUsB,KAAKD,WAiBvBpC,EAAqBmC,EAAYW,UAAW,SAAS,WACpD,OAAO7B,EAAOoB,KAAKD,WAiBpBpC,EAAqBmC,EAAYW,UAAW,YAAY,WACvD,OAAO3B,EAAUkB,KAAKD,WAmBvBtC,EAAaqC,EAAYW,UAAW,OA/QpC,SAAyBC,GACxB,OAAO1B,EAAK0B,EAAGV,KAAKD,WAgSrBtC,EAAaqC,EAAYW,UAAW,UAtRpC,SAA4BC,GAC3B,OAAOxB,EAAQwB,EAAGV,KAAKD,WAuSxBtC,EAAaqC,EAAYW,UAAW,UA7RpC,SAA4BC,GAC3B,OAAOtB,EAAQsB,EAAGV,KAAKD,WA8SxBtC,EAAaqC,EAAYW,UAAW,OApSpC,SAAyBE,GACxB,OAAOrB,EAAKqB,EAAGX,KAAKD,WAqTrBtC,EAAaqC,EAAYW,UAAW,OA3SpC,SAAyBC,GACxB,OAAOlB,EAAKkB,EAAGV,KAAKD,WA4TrBtC,EAAaqC,EAAYW,UAAW,YAlTpC,SAA8BG,GAC7B,OAAOlB,EAAUkB,EAAGZ,KAAKD,WAsT1B,ICxXAc,EDwXiBf"}